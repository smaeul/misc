#!/bin/sh -e
#
# Copyright Â© 2016-2017 Samuel Holland <samuel@sholland.org>
# SPDX-License-Identifier: 0BSD
# vim: expandtab:sts=2:sw=2:ts=8:tw=100
#

BINARIES="busybox zfs zpool"
MODULES="zfs"
OUTPUT=/boot

init="$(mktemp)"
list="$(mktemp)"
tmpdir="$(mktemp -d)"
version="$(readlink /usr/src/linux || ls -1 /lib/modules | tail -n1)"
version="${version#linux-}"

trap 'rm -fr "$init" "$tmpdir" "$list"' EXIT
mkdir -p "${tmpdir}/lib/modules/${version}"

if test -f "${OUTPUT}/initramfs-${version}"; then
  mv "${OUTPUT}/initramfs-${version}" "${OUTPUT}/initramfs-${version}.old"
fi

cat > "$init" << 'EOF'
#!/bin/sh

root=${1:-/dev/sda2}

mount -nt devtmpfs dev /dev
mount -nt proc proc /proc
mount -nt sysfs sys /sys

case "$root" in
  /*)
    mount -i -o ro,noatime,nodev -t auto "$root" /pivot
    ;;
  *=*)
    mount -i -o ro,noatime,nodev -t auto "$(findfs "$root")" /pivot
    ;;
  *)
    modprobe zfs
    zpool import -N "${root%%/*}"
    mount -i -o ro,noatime,nodev -t zfs "$root" /pivot
    ;;
esac

while ! mountpoint -q /pivot; do
  echo "please mount the root filesystem on /pivot and exit"
  sh
done

umount -n /dev /proc /sys

exec switch_root /pivot "${2:-/etc/rc/init}"
EOF

cat > "$list" << EOF
dir	/bin	755 0 0
dir	/dev	755 0 0
dir	/etc	755 0 0
dir	/keys	755 0 0
dir	/lib	755 0 0
dir	/lib/modules	755 0 0
dir	/lib/modules/${version}	755 0 0
dir	/pivot	755 0 0
dir	/proc	755 0 0
dir	/sys	755 0 0
file	/init	${init}	755 0 0
nod	/dev/console	600 0 0 c 5 1
nod	/dev/full	600 0 0 c 1 7
nod	/dev/null	600 0 0 c 1 3
nod	/dev/random	600 0 0 c 1 8
nod	/dev/tty	600 0 0 c 5 0
nod	/dev/urandom	600 0 0 c 1 9
nod	/dev/zero	600 0 0 c 1 5
slink	/bin/sh	busybox	777 0 0
slink	/dev/fd	../proc/self/fd	777 0 0
slink	/etc/mtab	../proc/mounts	777 0 0
slink	/lib64	lib	777 0 0
EOF

lddtree -l $(which $BINARIES) | sort -u | while read -r file; do
  base="$(basename "$file")"
  case "$file" in
    */bin/*|*/sbin/*)  printf 'file\t/bin/%s\t%s\t755 0 0\n' "$base" "$file" >> "$list" ;;
    */lib/*|*/lib??/*) printf 'file\t/lib/%s\t%s\t755 0 0\n' "$base" "$file" >> "$list" ;;
  esac
done

for module in $MODULES; do
  file="$(modinfo -F filename -k "$version" "$module")"
  base="$(basename "$file")"
  cp "$file" "${tmpdir}/lib/modules/${version}"
  printf 'file\t/lib/modules/%s/%s\t%s\t644 0 0\n' "$version" "$base" "$file" >> "$list"
done

modinfo -F depends -k "$version" $MODULES | tr ',' '\n' | sort -u | while read -r module; do
  file="$(modinfo -F filename -k "$version" "$module")"
  base="$(basename "$file")"
  cp "$file" "${tmpdir}/lib/modules/${version}"
  printf 'file\t/lib/modules/%s/%s\t%s\t644 0 0\n' "$version" "$base" "$file" >> "$list"
done

depmod -b "$tmpdir" "$version" 2> /dev/null
for file in "${tmpdir}/lib/modules/${version}"/modules.*; do
  base="$(basename "$file")"
  printf 'file\t/lib/modules/%s/%s\t%s\t644 0 0\n' "$version" "$base" "$file" >> "$list"
done

gen_init_cpio "$list" | gzip -9n > "${OUTPUT}/initramfs-${version}"
